<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cz.muni.fi.pv243.clustering</groupId>
        <artifactId>remote-ejb</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <groupId>cz.muni.fi.pv243.clustering.ejb</groupId>
    <artifactId>client-side</artifactId>
    <name>PV243 Clustering seminar - Remote EJB - Client Side</name>
    <description>PV243 Clustering seminar - Remote EJB - Client Side</description>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.wildfly</groupId>
                <artifactId>wildfly-ejb-client-bom</artifactId>
                <version>${wildfly.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- We depend on the EJB remote business interfaces of this application -->
        <dependency>
            <groupId>cz.muni.fi.pv243.clustering.ejb</groupId>
            <artifactId>server-side</artifactId>
            <type>ejb-client</type>
            <version>${project.version}</version>
        </dependency>

        <!-- JBoss EJB client API jar. -->
        <!-- We use runtime scope because the EJB client API isn't directly used in this example. -->
        <!-- We just need it in our runtime classpath, to get initial context. -->
        <dependency>
            <groupId>org.jboss</groupId>
            <artifactId>jboss-ejb-client</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Import the EJB 3.2 API -->
        <!-- We use runtime scope because we aren't using any direct reference to EJB spec API in our client code. -->
        <!-- To get e.g. EJBHome interface -->
        <dependency>
            <groupId>org.jboss.spec.javax.ejb</groupId>
            <artifactId>jboss-ejb-api_3.2_spec</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Client communications with the server use XNIO -->
        <dependency>
            <groupId>org.jboss.xnio</groupId>
            <artifactId>xnio-api</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.xnio</groupId>
            <artifactId>xnio-nio</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- The client needs JBoss Remoting to access the server -->
        <dependency>
            <groupId>org.jboss.remoting</groupId>
            <artifactId>jboss-remoting</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Remote EJB accesses can be secured -->
        <dependency>
            <groupId>org.jboss.sasl</groupId>
            <artifactId>jboss-sasl</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Data serialization for invoking remote EJBs -->
        <dependency>
            <groupId>org.jboss.marshalling</groupId>
            <artifactId>jboss-marshalling-river</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Import the transaction spec API 1.2 -->
        <!-- We use runtime scope because we aren't using any direct reference to the spec API in our client code -->
        <dependency>
            <groupId>org.jboss.spec.javax.transaction</groupId>
            <artifactId>jboss-transaction-api_1.2_spec</artifactId>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.3.2</version>
                <configuration>
                    <executable>java</executable>
                    <includeProjectDependencies>true</includeProjectDependencies>
                    <includePluginDependencies>true</includePluginDependencies>
                    <arguments>
                        <argument>200</argument>
                    </arguments>
                    <cleanupDaemonThreads>false</cleanupDaemonThreads>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
